{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\Desktop\\\\chat\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../context/ChatProvider\";\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport \"./styles.css\";\nimport io from \"socket.io-client\";\nimport animationData from \"../animations/typing.json\";\nimport { Button } from \"@material-ui/core\";\nimport { BASE_URL } from \"../services/helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket, selectedChatCompare;\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`${BASE_URL}/api/message/${selectedChat._id}`, config);\n      console.log(data);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  }\n  useEffect(() => {\n    socket = io(BASE_URL);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message received\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const sendMessage = async () => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(`${BASE_URL}/api/message`, {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (e.key === \"Enter\" || e.target.value === \"\") {\n      // If Enter key is pressed or the input is empty, stop typing\n      socket.emit(\"stop typing\", selectedChat._id);\n    } else {\n      // If a key is pressed and the input is not empty, emit \"typing\" event\n      socket.emit(\"typing\", selectedChat._id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          display: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            borderRadius: \"none\",\n            variant: \"outline\",\n            bg: \"#FFFFFF\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler,\n            border: \"none\",\n            onKeyDown: handleKeyDown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              color: \"#E50061\",\n              borderRadius: \"0px\",\n              backgroundColor: \"#FFFFFF\"\n            },\n            onClick: sendMessage,\n            children: [\" \", \"send\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"J0/5w4jPVqRx8QfTCSBBWdq70n4=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","Box","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","ScrollableChat","io","animationData","Button","BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","selectedChat","setSelectedChat","user","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","console","log","emit","error","title","description","status","duration","isClosable","position","handleKeyDown","event","key","sendMessage","on","newMessageRecieved","chat","includes","post","content","chatId","typingHandler","e","target","value","children","fontSize","base","md","pb","px","w","fontFamily","display","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","users","chatName","toUpperCase","flexDir","p","bg","h","borderRadius","overflowY","size","alignSelf","margin","className","id","isRequired","mt","variant","placeholder","onChange","border","onKeyDown","style","color","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/harsh/Desktop/chat/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../context/ChatProvider\";\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  Input,\n  Spinner,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport \"./styles.css\";\nimport io from \"socket.io-client\";\nimport animationData from \"../animations/typing.json\";\nimport { Button } from \"@material-ui/core\";\n\nimport { BASE_URL } from \"../services/helper\";\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      setLoading(true);\n      const { data } = await axios.get(\n        `${BASE_URL}/api/message/${selectedChat._id}`,\n        config\n      );\n      console.log(data);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  }\n\n  useEffect(() => {\n    socket = io(BASE_URL);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const sendMessage = async () => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          `${BASE_URL}/api/message`,\n          {\n            content: newMessage,\n            chatId: selectedChat._id,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (e.key === \"Enter\" || e.target.value === \"\") {\n      // If Enter key is pressed or the input is empty, stop typing\n      socket.emit(\"stop typing\", selectedChat._id);\n    } else {\n      // If a key is pressed and the input is not empty, emit \"typing\" event\n      socket.emit(\"typing\", selectedChat._id);\n    }\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n\n            {!selectedChat.isGroupChat ? (\n              <>\n                {getSender(user, selectedChat.users)}\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n              </>\n            ) : (\n              <>\n                {selectedChat.chatName.toUpperCase()}\n                <UpdateGroupChatModal\n                  fetchMessages={fetchMessages}\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                />\n              </>\n            )}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl id=\"first-name\" isRequired mt={3} display=\"flex\">\n              <Input\n                borderRadius={\"none\"}\n                variant=\"outline\"\n                bg=\"#FFFFFF\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n                border={\"none\"}\n                onKeyDown={handleKeyDown}\n              />\n\n              <Button\n                style={{\n                  color: \"#E50061\",\n                  borderRadius: \"0px\",\n                  backgroundColor: \"#FFFFFF\",\n                }}\n                onClick={sendMessage}\n              >\n                {\" \"}\n                send{\" \"}\n              </Button>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SACEC,GAAG,EACHC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,QAAQ,QACH,kBAAkB;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,EAAEC,aAAa,QAAQ,sBAAsB;AAC/D,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,oBAAoB,MAAM,sCAAsC;AACvE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,cAAc;AACrB,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,aAAa,MAAM,2BAA2B;AACrD,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,SAASC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,IAAIC,MAAM,EAAEC,mBAAmB;AAE/B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkC,UAAU,EAAEC,aAAa,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACsC,MAAM,EAAEC,SAAS,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACwC,QAAQ,EAAEC,WAAW,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM0C,KAAK,GAAGlC,QAAQ,CAAC,CAAC;EACxB,MAAM;IAAEmC,YAAY;IAAEC,eAAe;IAAEC,IAAI;IAAEC,YAAY;IAAEC;EAAgB,CAAC,GAC1E9C,SAAS,CAAC,CAAC;EAEb,MAAM+C,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACL,YAAY,EAAE;IACnB,IAAI;MACF,MAAMM,MAAM,GAAG;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASN,IAAI,CAACO,KAAM;QACtC;MACF,CAAC;MACDnB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM;QAAEoB;MAAK,CAAC,GAAG,MAAMvC,KAAK,CAACwC,GAAG,CAC7B,GAAEnC,QAAS,gBAAewB,YAAY,CAACY,GAAI,EAAC,EAC7CN,MACF,CAAC;MACDO,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACjBtB,WAAW,CAACsB,IAAI,CAAC;MACjBpB,UAAU,CAAC,KAAK,CAAC;MACjBT,MAAM,CAACkC,IAAI,CAAC,WAAW,EAAEf,YAAY,CAACY,GAAG,CAAC;IAC5C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdjB,KAAK,CAAC;QACJkB,KAAK,EAAE,gBAAgB;QACvBC,WAAW,EAAE,6BAA6B;QAC1CC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EAED,SAASC,aAAaA,CAACC,KAAK,EAAE;IAC5B,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;MACzBC,WAAW,CAAC,CAAC;IACf;EACF;EAEAtE,SAAS,CAAC,MAAM;IACdyB,MAAM,GAAGR,EAAE,CAACG,QAAQ,CAAC;IACrBK,MAAM,CAACkC,IAAI,CAAC,OAAO,EAAEb,IAAI,CAAC;IAC1BrB,MAAM,CAAC8C,EAAE,CAAC,WAAW,EAAE,MAAMjC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACtDb,MAAM,CAAC8C,EAAE,CAAC,QAAQ,EAAE,MAAM7B,WAAW,CAAC,IAAI,CAAC,CAAC;IAC5CjB,MAAM,CAAC8C,EAAE,CAAC,aAAa,EAAE,MAAM7B,WAAW,CAAC,KAAK,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN1C,SAAS,CAAC,MAAM;IACdiD,aAAa,CAAC,CAAC;IACfvB,mBAAmB,GAAGkB,YAAY;EACpC,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB5C,SAAS,CAAC,MAAM;IACdyB,MAAM,CAAC8C,EAAE,CAAC,kBAAkB,EAAGC,kBAAkB,IAAK;MACpD,IACE,CAAC9C,mBAAmB,IACpBA,mBAAmB,CAAC8B,GAAG,KAAKgB,kBAAkB,CAACC,IAAI,CAACjB,GAAG,EACvD;QACA,IAAI,CAACT,YAAY,CAAC2B,QAAQ,CAACF,kBAAkB,CAAC,EAAE;UAC9CxB,eAAe,CAAC,CAACwB,kBAAkB,EAAE,GAAGzB,YAAY,CAAC,CAAC;UACtDlB,aAAa,CAAC,CAACD,UAAU,CAAC;QAC5B;MACF,CAAC,MAAM;QACLI,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEyC,kBAAkB,CAAC,CAAC;MAChD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMF,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAInC,UAAU,EAAE;MACdV,MAAM,CAACkC,IAAI,CAAC,aAAa,EAAEf,YAAY,CAACY,GAAG,CAAC;MAC5C,IAAI;QACF,MAAMN,MAAM,GAAG;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAG,UAASN,IAAI,CAACO,KAAM;UACtC;QACF,CAAC;QACDjB,aAAa,CAAC,EAAE,CAAC;QACjB,MAAM;UAAEkB;QAAK,CAAC,GAAG,MAAMvC,KAAK,CAAC4D,IAAI,CAC9B,GAAEvD,QAAS,cAAa,EACzB;UACEwD,OAAO,EAAEzC,UAAU;UACnB0C,MAAM,EAAEjC,YAAY,CAACY;QACvB,CAAC,EACDN,MACF,CAAC;QACDzB,MAAM,CAACkC,IAAI,CAAC,aAAa,EAAEL,IAAI,CAAC;QAChCtB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEuB,IAAI,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdjB,KAAK,CAAC;UACJkB,KAAK,EAAE,gBAAgB;UACvBC,WAAW,EAAE,4BAA4B;UACzCC,MAAM,EAAE,OAAO;UACfC,QAAQ,EAAE,IAAI;UACdC,UAAU,EAAE,IAAI;UAChBC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,MAAMY,aAAa,GAAIC,CAAC,IAAK;IAC3B3C,aAAa,CAAC2C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC7B,IAAI,CAAC5C,eAAe,EAAE;IACtB,IAAI0C,CAAC,CAACV,GAAG,KAAK,OAAO,IAAIU,CAAC,CAACC,MAAM,CAACC,KAAK,KAAK,EAAE,EAAE;MAC9C;MACAxD,MAAM,CAACkC,IAAI,CAAC,aAAa,EAAEf,YAAY,CAACY,GAAG,CAAC;IAC9C,CAAC,MAAM;MACL;MACA/B,MAAM,CAACkC,IAAI,CAAC,QAAQ,EAAEf,YAAY,CAACY,GAAG,CAAC;IACzC;EACF,CAAC;EAED,oBACElC,OAAA,CAAAE,SAAA;IAAA0D,QAAA,EACGtC,YAAY,gBACXtB,OAAA,CAAAE,SAAA;MAAA0D,QAAA,gBACE5D,OAAA,CAACd,IAAI;QACH2E,QAAQ,EAAE;UAAEC,IAAI,EAAE,MAAM;UAAEC,EAAE,EAAE;QAAO,CAAE;QACvCC,EAAE,EAAE,CAAE;QACNC,EAAE,EAAE,CAAE;QACNC,CAAC,EAAC,MAAM;QACRC,UAAU,EAAC,WAAW;QACtBC,OAAO,EAAC,MAAM;QACdC,cAAc,EAAE;UAAEP,IAAI,EAAE;QAAgB,CAAE;QAC1CQ,UAAU,EAAC,QAAQ;QAAAV,QAAA,gBAEnB5D,OAAA,CAACjB,UAAU;UACTqF,OAAO,EAAE;YAAEN,IAAI,EAAE,MAAM;YAAEC,EAAE,EAAE;UAAO,CAAE;UACtCQ,IAAI,eAAEvE,OAAA,CAACZ,aAAa;YAAAoF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UACxBC,OAAO,EAAEA,CAAA,KAAMrD,eAAe,CAAC,EAAE;QAAE;UAAAiD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC,EAED,CAACrD,YAAY,CAACuD,WAAW,gBACxB7E,OAAA,CAAAE,SAAA;UAAA0D,QAAA,GACGvE,SAAS,CAACmC,IAAI,EAAEF,YAAY,CAACwD,KAAK,CAAC,eACpC9E,OAAA,CAACT,YAAY;YAACiC,IAAI,EAAElC,aAAa,CAACkC,IAAI,EAAEF,YAAY,CAACwD,KAAK;UAAE;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,eAC/D,CAAC,gBAEH3E,OAAA,CAAAE,SAAA;UAAA0D,QAAA,GACGtC,YAAY,CAACyD,QAAQ,CAACC,WAAW,CAAC,CAAC,eACpChF,OAAA,CAACR,oBAAoB;YACnBmC,aAAa,EAAEA,aAAc;YAC7BrB,UAAU,EAAEA,UAAW;YACvBC,aAAa,EAAEA;UAAc;YAAAiE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA,eACF,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACP3E,OAAA,CAACnB,GAAG;QACFuF,OAAO,EAAC,MAAM;QACda,OAAO,EAAC,QAAQ;QAChBZ,cAAc,EAAC,UAAU;QACzBa,CAAC,EAAE,CAAE;QACLC,EAAE,EAAC,SAAS;QACZjB,CAAC,EAAC,MAAM;QACRkB,CAAC,EAAC,MAAM;QACRC,YAAY,EAAC,IAAI;QACjBC,SAAS,EAAC,QAAQ;QAAA1B,QAAA,GAEjBjD,OAAO,gBACNX,OAAA,CAACf,OAAO;UACNsG,IAAI,EAAC,IAAI;UACTrB,CAAC,EAAE,EAAG;UACNkB,CAAC,EAAE,EAAG;UACNI,SAAS,EAAC,QAAQ;UAClBC,MAAM,EAAC;QAAM;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,gBAEF3E,OAAA;UAAK0F,SAAS,EAAC,UAAU;UAAA9B,QAAA,eACvB5D,OAAA,CAACN,cAAc;YAACe,QAAQ,EAAEA;UAAS;YAAA+D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CACN,eAED3E,OAAA,CAAClB,WAAW;UAAC6G,EAAE,EAAC,YAAY;UAACC,UAAU;UAACC,EAAE,EAAE,CAAE;UAACzB,OAAO,EAAC,MAAM;UAAAR,QAAA,gBAC3D5D,OAAA,CAAChB,KAAK;YACJqG,YAAY,EAAE,MAAO;YACrBS,OAAO,EAAC,SAAS;YACjBX,EAAE,EAAC,SAAS;YACZY,WAAW,EAAC,mBAAmB;YAC/BpC,KAAK,EAAE9C,UAAW;YAClBmF,QAAQ,EAAExC,aAAc;YACxByC,MAAM,EAAE,MAAO;YACfC,SAAS,EAAErD;UAAc;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eAEF3E,OAAA,CAACH,MAAM;YACLsG,KAAK,EAAE;cACLC,KAAK,EAAE,SAAS;cAChBf,YAAY,EAAE,KAAK;cACnBgB,eAAe,EAAE;YACnB,CAAE;YACFzB,OAAO,EAAE5B,WAAY;YAAAY,QAAA,GAEpB,GAAG,EAAC,MACD,EAAC,GAAG;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC;IAAA,eACN,CAAC,gBAEH3E,OAAA,CAACnB,GAAG;MACFuF,OAAO,EAAC,MAAM;MACdE,UAAU,EAAC,QAAQ;MACnBD,cAAc,EAAC,QAAQ;MACvBe,CAAC,EAAC,MAAM;MAAAxB,QAAA,eAER5D,OAAA,CAACd,IAAI;QAAC2E,QAAQ,EAAC,KAAK;QAACG,EAAE,EAAE,CAAE;QAACG,UAAU,EAAC,WAAW;QAAAP,QAAA,EAAC;MAEnD;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EACN,gBACD,CAAC;AAEP,CAAC;AAACnE,EAAA,CA9NIH,UAAU;EAAA,QAOAlB,QAAQ;AAAA;AAAAmH,EAAA,GAPlBjG,UAAU;AAgOhB,eAAeA,UAAU;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}