{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\Desktop\\\\chat\\\\frontend\\\\src\\\\context\\\\ChatProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n//The below code is used to create a context, in this case, the context is called 'ChatContext'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n//parameter children is basically whole of the app\nconst ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    //If we want to login, we need to get the user info from the local storage\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    //if there is no user info, then redirect to login page\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      selectedChat,\n      setSelectedChat,\n      user,\n      setUser,\n      notification,\n      setNotification,\n      chats,\n      setChats\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n//every state is present inside the ChatState, so we can use it anywhere in the app\n_s(ChatProvider, \"IUwOvVhsJdD5eRub98KG8U8Nxy8=\", false, function () {\n  return [useHistory];\n});\n_c = ChatProvider;\nexport const ChatState = () => {\n  _s2();\n  return useContext(ChatContext);\n};\n_s2(ChatState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = ChatState;\nexport default ChatProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatProvider\");\n$RefreshReg$(_c2, \"ChatState\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useHistory","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","ChatState","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/harsh/Desktop/chat/frontend/src/context/ChatProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n//The below code is used to create a context, in this case, the context is called 'ChatContext'\nconst ChatContext = createContext();\n\n//parameter children is basically whole of the app\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState([]);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    //If we want to login, we need to get the user info from the local storage\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    //if there is no user info, then redirect to login page\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\n//every state is present inside the ChatState, so we can use it anywhere in the app\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAClD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMgB,OAAO,GAAGf,UAAU,CAAC,CAAC;EAE5BF,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7DV,OAAO,CAACM,QAAQ,CAAC;;IAEjB;IACA,IAAI,CAACA,QAAQ,EAAED,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC;EAClC,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEb,oBACEb,OAAA,CAACC,WAAW,CAACmB,QAAQ;IACnBC,KAAK,EAAE;MACLhB,YAAY;MACZC,eAAe;MACfC,IAAI;MACJC,OAAO;MACPC,YAAY;MACZC,eAAe;MACfC,KAAK;MACLC;IACF,CAAE;IAAAT,QAAA,EAEDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAArB,EAAA,CAnCMF,YAAY;EAAA,QAMAJ,UAAU;AAAA;AAAA4B,EAAA,GANtBxB,YAAY;AAoClB,OAAO,MAAMyB,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,OAAOjC,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAAC2B,GAAA,CAFWD,SAAS;AAAAE,GAAA,GAATF,SAAS;AAItB,eAAezB,YAAY;AAAC,IAAAwB,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}